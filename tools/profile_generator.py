#!/usr/bin/env python3
"""
UEVR Profile Generator
Automated tool for generating game profiles and UObjectHook attachments
"""

import os
import json
import argparse
import subprocess
import shutil
from pathlib import Path
from typing import Dict, List, Optional

class ProfileGenerator:
    def __init__(self, uevr_root: str):
        self.uevr_root = Path(uevr_root)
        self.profiles_dir = self.uevr_root / "profiles"
        self.adapters_dir = self.uevr_root / "src" / "adapters"
        self.templates_dir = self.profiles_dir / "_TEMPLATES"
        
    def generate_profile(self, game_name: str, executable: str, engine: str, 
                        steam_app_id: str = "", epic_app_id: str = "") -> bool:
        """Generate a complete profile for a game"""
        try:
            # Create profile directory
            profile_dir = self.profiles_dir / game_name
            profile_dir.mkdir(exist_ok=True)
            
            # Copy appropriate template
            template_dir = self.templates_dir / engine.lower().replace("-", "_")
            if template_dir.exists():
                self._copy_template(template_dir, profile_dir)
            else:
                self._copy_template(self.templates_dir / "base", profile_dir)
            
            # Generate profile.json
            profile_config = self._generate_profile_config(
                game_name, executable, engine, steam_app_id, epic_app_id
            )
            
            profile_file = profile_dir / "profile.json"
            with open(profile_file, 'w') as f:
                json.dump(profile_config, f, indent=2)
            
            # Generate README.md
            readme_content = self._generate_readme(game_name, engine)
            readme_file = profile_dir / "README.md"
            with open(readme_file, 'w') as f:
                f.write(readme_content)
            
            # Create additional directories
            (profile_dir / "screenshots").mkdir(exist_ok=True)
            (profile_dir / "configs").mkdir(exist_ok=True)
            (profile_dir / "patches").mkdir(exist_ok=True)
            
            print(f"✅ Profile generated successfully: {profile_dir}")
            return True
            
        except Exception as e:
            print(f"❌ Failed to generate profile: {e}")
            return False
    
    def _copy_template(self, template_dir: Path, target_dir: Path):
        """Copy template files to target directory"""
        if not template_dir.exists():
            return
            
        for item in template_dir.iterdir():
            if item.is_file():
                shutil.copy2(item, target_dir)
            elif item.is_dir():
                shutil.copytree(item, target_dir / item.name, dirs_exist_ok=True)
    
    def _generate_profile_config(self, game_name: str, executable: str, 
                                engine: str, steam_app_id: str, epic_app_id: str) -> Dict:
        """Generate profile configuration"""
        # Load base template
        template_file = self.templates_dir / engine.lower().replace("-", "_") / "profile.json"
        if template_file.exists():
            with open(template_file, 'r') as f:
                config = json.load(f)
        else:
            # Fallback to base template
            with open(self.templates_dir / "base" / "profile.json", 'r') as f:
                config = json.load(f)
        
        # Update game-specific information
        config["game_info"]["executable"] = executable
        config["game_info"]["display_name"] = game_name
        config["game_info"]["steam_app_id"] = steam_app_id
        config["game_info"]["epic_app_id"] = epic_app_id
        
        return config
    
    def _generate_readme(self, game_name: str, engine: str) -> str:
        """Generate README content"""
        return f"""# {game_name} — UEVR Profile

## Game Information
- **Executable**: `{game_name}.exe`
- **Engine**: {engine}
- **VR Compatibility Tier**: 3 (Basic)
- **Steam App ID**: (if applicable)
- **Epic App ID**: (if applicable)

## Profile Status
This profile was auto-generated by the UEVR Profile Generator.

## Configuration
- **Engine**: {engine}
- **Rendering**: Optimized for {engine}
- **VR Features**: Basic stereo rendering and motion controllers

## Installation
1. Copy this profile to your UEVR profiles directory
2. Launch the game normally
3. VR mode will activate automatically

## Next Steps
1. Test basic VR functionality
2. Adjust world scale for comfort
3. Configure UObjectHook attachments
4. Optimize performance settings
5. Test with different VR hardware

## Support
For issues with this profile:
1. Check the main UEVR documentation
2. Verify game version compatibility
3. Test with different VR hardware
4. Report issues with detailed information

## Contributing
This profile is auto-generated. To improve it:
1. Test thoroughly with the target game
2. Document any special requirements
3. Include screenshots of VR implementation
4. Update compatibility tier based on testing
"""
    
    def analyze_executable(self, executable_path: str) -> Optional[Dict]:
        """Analyze game executable for engine detection"""
        try:
            # Basic executable analysis
            exe_path = Path(executable_path)
            if not exe_path.exists():
                print(f"❌ Executable not found: {executable_path}")
                return None
            
            # Get file size and basic info
            stat = exe_path.stat()
            file_size = stat.st_size
            
            # Try to detect engine based on file characteristics
            engine_hints = self._detect_engine_hints(executable_path, file_size)
            
            return {
                "executable": exe_path.name,
                "file_size": file_size,
                "engine_hints": engine_hints,
                "path": str(exe_path.absolute())
            }
            
        except Exception as e:
            print(f"❌ Failed to analyze executable: {e}")
            return None
    
    def _detect_engine_hints(self, executable_path: str, file_size: int) -> List[str]:
        """Detect engine hints based on executable characteristics"""
        hints = []
        
        # File size hints
        if file_size > 100 * 1024 * 1024:  # >100MB
            hints.append("Large executable - likely modern engine")
        elif file_size > 50 * 1024 * 1024:  # >50MB
            hints.append("Medium executable - standard engine")
        else:
            hints.append("Small executable - lightweight engine")
        
        # Name hints
        exe_name = Path(executable_path).name.lower()
        if "unreal" in exe_name:
            hints.append("Unreal Engine likely")
        elif "unity" in exe_name:
            hints.append("Unity Engine likely")
        elif "re" in exe_name:
            hints.append("RE Engine possible")
        elif "red" in exe_name:
            hints.append("REDengine possible")
        
        return hints
    
    def generate_all_profiles(self) -> bool:
        """Generate profiles for all known games"""
        known_games = [
            ("Cyberpunk2077", "Cyberpunk2077.exe", "REDengine4", "1091500", "Cyberpunk2077"),
            ("ResidentEvil7", "re7-Win64-Shipping.exe", "RE-Engine", "418370", "ResidentEvil7"),
            ("MonsterHunterWorld", "MonsterHunterWorld.exe", "MT-Framework", "582010", "MonsterHunterWorld"),
            ("ResidentEvil8", "re8-Win64-Shipping.exe", "RE-Engine", "1196590", "ResidentEvil8"),
            ("AbioticFactor", "AbioticFactor-Win64-Shipping.exe", "Unreal-Engine-4", "", ""),
        ]
        
        success_count = 0
        for game_name, executable, engine, steam_id, epic_id in known_games:
            print(f"Generating profile for {game_name}...")
            if self.generate_profile(game_name, executable, engine, steam_id, epic_id):
                success_count += 1
        
        print(f"\n✅ Generated {success_count}/{len(known_games)} profiles successfully")
        return success_count == len(known_games)

def main():
    parser = argparse.ArgumentParser(description="UEVR Profile Generator")
    parser.add_argument("--uevr-root", default=".", help="UEVR root directory")
    parser.add_argument("--game", help="Generate profile for specific game")
    parser.add_argument("--executable", help="Game executable path")
    parser.add_argument("--engine", help="Game engine type")
    parser.add_argument("--steam-id", help="Steam App ID")
    parser.add_argument("--epic-id", help="Epic Games App ID")
    parser.add_argument("--analyze", help="Analyze executable for engine detection")
    parser.add_argument("--generate-all", action="store_true", help="Generate all known profiles")
    
    args = parser.parse_args()
    
    generator = ProfileGenerator(args.uevr_root)
    
    if args.analyze:
        result = generator.analyze_executable(args.analyze)
        if result:
            print("Executable Analysis:")
            print(json.dumps(result, indent=2))
    
    elif args.generate_all:
        generator.generate_all_profiles()
    
    elif args.game and args.executable and args.engine:
        generator.generate_profile(args.game, args.executable, args.engine, 
                                args.steam_id or "", args.epic_id or "")
    
    else:
        parser.print_help()

if __name__ == "__main__":
    main()


