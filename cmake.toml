# Reference: https://build-cpp.github.io/cmkr/cmake-toml
# to build:
# > cmake -B build
# > cmake --build build --config Release
[project]
name = "uevr-proj"
cmake-before=""" 
set(CMAKE_POLICY_VERSION_MINIMUM 3.5)
add_compile_options($<$<CXX_COMPILER_ID:MSVC>:/MP>)

# Enable PDB generation in release mode, but without the extra crap that RelWithDebInfo adds
add_compile_options("$<$<CONFIG:Release>:/Zi>")
add_link_options("$<$<CONFIG:Release>:/DEBUG>")
add_link_options("$<$<CONFIG:Release>:/OPT:REF>")
add_link_options("$<$<CONFIG:Release>:/OPT:ICF>")

# Cross-Engine VR System Configuration
option(uevr_BUILD_CROSS_ENGINE "Build Cross-Engine VR Adapters" ON)
option(uevr_BUILD_RE_ENGINE_ADAPTER "Build RE Engine Adapter (RE7 + RE8)" ON)
option(uevr_BUILD_REDENGINE4_ADAPTER "Build REDengine 4 Adapter (Cyberpunk 2077)" ON)
option(uevr_BUILD_MT_FRAMEWORK_ADAPTER "Build MT Framework Adapter (Monster Hunter World)" ON)
option(uevr_BUILD_ALL_ADAPTERS "Build All Cross-Engine Adapters" ON)
"""
cmake-after = """
set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} /MP")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /MP")

set(ASMJIT_STATIC ON CACHE BOOL "" FORCE)

if ("${CMAKE_BUILD_TYPE}" MATCHES "Release")
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} /MT")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /MT")

    # Statically compile runtime
    string(REGEX REPLACE "/MD" "/MT" CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
    string(REGEX REPLACE "/MD" "/MT" CMAKE_C_FLAGS "${CMAKE_C_FLAGS}")
    string(REGEX REPLACE "/MD" "/MT" CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE}")
    string(REGEX REPLACE "/MD" "/MT" CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE}")

    message(NOTICE "Building in Release mode")
endif()

set(CMAKE_MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")

add_subdirectory(dependencies/submodules/UESDK)
add_subdirectory(src/adapters)
"""

[target.spdlog]
type = "static"
sources = ["dependencies/submodules/spdlog/src/*.cpp"]
include-directories = ["dependencies/submodules/spdlog/include"]
compile-definitions = ["SPDLOG_COMPILED_LIB"]
alias="spdlog::spdlog"

[target.glm]
type = "static"
sources = ["dependencies/submodules/glm/glm/**.cpp"]
include-directories = ["dependencies/submodules/glm"]

[fetch-content.bddisasm]
git = "https://github.com/bitdefender/bddisasm"
tag = "70db095765ab2066dd88dfb7bbcc42259ed167c5"

[fetch-content.kananlib]
git = "https://github.com/cursey/kananlib"
tag = "ac256f2a06c1ad473aaa193d36afb589fd6ca63d"

[fetch-content.safetyhook]
git = "https://github.com/praydog/safetyhook"
tag = "b62c7356f3e364209a2ae14489550156d7b58b8b"
cmake-before="""
set(SAFETYHOOK_FETCH_ZYDIS ON)
"""

[fetch-content.sdkgenny]
git = "https://github.com/cursey/sdkgenny"
tag = "f58077f8da8a271490c17558e93b75843b3afd19"

[fetch-content.openxr]
git = "https://github.com/KhronosGroup/OpenXR-SDK"
tag = "458984d7f59d1ae6dc1b597d94b02e4f7132eaba"

[fetch-content.json]
git = "https://github.com/nlohmann/json"
tag = "bc889afb4c5bf1c0d8ee29ef35eaaf4c8bef8a5d"

[fetch-content.asmjit]
git = "https://github.com/asmjit/asmjit.git"
tag = "2a706fd2ba355808cada31ac1eed8ce28caa6b37"

[fetch-content.tracy]
git = "https://github.com/wolfpld/tracy"
tag = "897aec5b062664d2485f4f9a213715d2e527e0ca"
cmake-before="""
set(TRACY_STATIC ON CACHE BOOL "" FORCE)
set(TRACY_ENABLE OFF CACHE BOOL "" FORCE)
"""

[fetch-content.directxtk]
git = "https://github.com/microsoft/DirectXTK"
tag = "f5026eb34e7053b1aff325d38db107703f394974"
cmake-before="""
set(BUILD_TOOLS OFF CACHE BOOL "" FORCE)
"""
cmake-after="""
if(CMAKE_CXX_COMPILER_VERSION VERSION_GREATER_EQUAL 19.35)
    target_compile_options(DirectXTK PRIVATE /Zc:templateScope-)
endif()
"""

[fetch-content.directxtk12]
git = "https://github.com/microsoft/DirectXTK12"
tag = "528801aa6dd8d628c2f756c41a76d300f47de478"
cmake-before="""
set(BUILD_TOOLS OFF CACHE BOOL "" FORCE)
"""
cmake-after="""
if(CMAKE_CXX_COMPILER_VERSION VERSION_GREATER_EQUAL 19.35)
    target_compile_options(DirectXTK12 PRIVATE /Zc:templateScope-)
endif()
"""

[target.openvr]
type = "shared"
sources = ["dependencies/openvr/src/**.cpp", "dependencies/openvr/src/vrcommon/**.cpp"]
include-directories = ["dependencies/openvr/headers"]
compile-definitions = ["VR_API_PUBLIC", "WIN64"]
alias = "openvr_api"

[target.openvr.properties]
OUTPUT_NAME = "openvr_api"

[target.imgui]
type = "static"
sources = ["dependencies/submodules/imgui/*.cpp"]
include-directories = ["dependencies/submodules/imgui", "src/uevr-imgui"]
compile-definitions = [
    "IMGUI_USER_CONFIG=\"${CMAKE_CURRENT_SOURCE_DIR}/src/uevr-imgui/uevr_imconfig.hpp\"",
]

[target.plugin_renderlib]
type = "static"
sources = ["examples/renderlib/**.cpp", "examples/renderlib/**.c"]
headers = ["examples/renderlib/**.hpp", "examples/renderlib/**.h"]
include-directories = ["examples/renderlib", "include/"]
compile-options = ["/EHa", "/MP"]
compile-features = ["cxx_std_23"]
link-libraries = [
    "imgui"
]

[template.plugin]
type = "shared"
include-directories = ["include/", "examples/renderlib"]
compile-features = ["cxx_std_23"]
link-libraries = [
    "plugin_renderlib",
]

[target.example_plugin]
type = "plugin"
sources = ["examples/example_plugin/**.cpp", "examples/example_plugin/**.c"]
headers = ["examples/example_plugin/**.hpp", "examples/example_plugin/**.h"]

[target.sdk-test]
type = "shared"
sources = ["side-projects/sdk-test/**.cpp", "side-projects/sdk-test/**.c"]
headers = ["side-projects/sdk-test/**.hpp", "side-projects/sdk-test/**.h"]
include-directories = ["shared/", "include/"]
compile-features = ["cxx_std_23"]
link-libraries = [
    "kananlib",
    "uesdk"
]

[target.vr-plugin-nullifier]
type = "shared"
sources = ["vr-plugin-nullifier/**.cpp", "vr-plugin-nullifier/**.c"]
compile-options = ["/GS-", "/EHa", "/MP"]
compile-features = ["cxx_std_23"]
link-libraries = [
    "kananlib"
]

[target.vr-plugin-nullifier.properties]
OUTPUT_NAME = "UEVRPluginNullifier"
RUNTIME_OUTPUT_DIRECTORY_RELEASE = "${CMAKE_BINARY_DIR}/bin/${CMKR_TARGET}"
RUNTIME_OUTPUT_DIRECTORY_RELWITHDEBINFO = "${CMAKE_BINARY_DIR}/bin/${CMKR_TARGET}"
LIBRARY_OUTPUT_DIRECTORY_RELEASE = "${CMAKE_BINARY_DIR}/lib/${CMKR_TARGET}"
LIBRARY_OUTPUT_DIRECTORY_RELWITHDEBINFO = "${CMAKE_BINARY_DIR}/lib/${CMKR_TARGET}"
ARCHIVE_OUTPUT_DIRECTORY_RELEASE = "${CMAKE_BINARY_DIR}/lib/${CMKR_TARGET}"
ARCHIVE_OUTPUT_DIRECTORY_RELWITHDEBINFO = "${CMAKE_BINARY_DIR}/lib/${CMKR_TARGET}"

[target.lua]
type = "static"
sources = ["dependencies/lua/src/*.c"]
include-directories = ["dependencies/lua/src"]

[target.sol2]
type = "interface"
include-directories = ["dependencies/sol2/single/single/include"]

[target.luavrlib]
type = "static"
compile-features = ["cxx_std_23"]
compile-options = ["/bigobj", "/EHa", "/MP"]
include-directories = ["include/", "lua-api/lib/include"]
sources = ["lua-api/lib/**.cpp", "lua-api/lib/**.c"]
headers = ["lua-api/lib/**.hpp", "lua-api/lib/**.h"]
link-libraries = [
    "lua",
    "sol2",
    "kananlib",
    "glm",
    "asmjit"
]

[target.LuaVR]
type = "shared"
compile-features = ["cxx_std_23"]
compile-options = ["/bigobj", "/EHa", "/MP"]
include-directories = ["include/"]
sources = ["lua-api/Main.cpp"]
link-libraries = [
    "luavrlib"
]

[target.LuaVR.properties]
RUNTIME_OUTPUT_DIRECTORY_RELEASE = "${CMAKE_BINARY_DIR}/bin/${CMKR_TARGET}"
RUNTIME_OUTPUT_DIRECTORY_RELWITHDEBINFO = "${CMAKE_BINARY_DIR}/bin/${CMKR_TARGET}"
LIBRARY_OUTPUT_DIRECTORY_RELEASE = "${CMAKE_BINARY_DIR}/lib/${CMKR_TARGET}"
LIBRARY_OUTPUT_DIRECTORY_RELWITHDEBINFO = "${CMAKE_BINARY_DIR}/lib/${CMKR_TARGET}"
ARCHIVE_OUTPUT_DIRECTORY_RELEASE = "${CMAKE_BINARY_DIR}/lib/${CMKR_TARGET}"
ARCHIVE_OUTPUT_DIRECTORY_RELWITHDEBINFO = "${CMAKE_BINARY_DIR}/lib/${CMKR_TARGET}"

[template.ue4template]
type = "shared"
sources = ["src/**.cpp", "src/**.c"]
headers = ["src/**.hpp", "src/**.h"]
include-directories = [
    "shared/", 
    "src/", 
    "include/", 
    "${OPENXR_SOURCE_DIR}/src"
]
compile-options = ["/GS-", "/bigobj", "/EHa", "/MP"]
compile-features = ["cxx_std_23"]
compile-definitions = []
link-libraries = [
    "shlwapi",
    "d3d11",
    "d3d12",
    "safetyhook",
    "glm",
    "imgui",
    "openvr_api",
    "openxr_loader",
    "nlohmann_json",
    "Version",
    "TracyClient",
    "DirectXTK",
    "DirectXTK12",
    "sdkgenny",
    "asmjit",
    "luavrlib"
]

[template.ue4template.properties]
OUTPUT_NAME = "UEVRBackend"
LINK_FLAGS = "/DELAYLOAD:openvr_api.dll"
RUNTIME_OUTPUT_DIRECTORY_RELEASE = "${CMAKE_BINARY_DIR}/bin/${CMKR_TARGET}"
RUNTIME_OUTPUT_DIRECTORY_RELWITHDEBINFO = "${CMAKE_BINARY_DIR}/bin/${CMKR_TARGET}"
LIBRARY_OUTPUT_DIRECTORY_RELEASE = "${CMAKE_BINARY_DIR}/lib/${CMKR_TARGET}"
LIBRARY_OUTPUT_DIRECTORY_RELWITHDEBINFO = "${CMAKE_BINARY_DIR}/lib/${CMKR_TARGET}"
ARCHIVE_OUTPUT_DIRECTORY_RELEASE = "${CMAKE_BINARY_DIR}/lib/${CMKR_TARGET}"
ARCHIVE_OUTPUT_DIRECTORY_RELWITHDEBINFO = "${CMAKE_BINARY_DIR}/lib/${CMKR_TARGET}"

[target.uevr]
type="ue4template"
link-libraries = [
    "kananlib",
    "uesdk",
    "uevr_re_engine_adapter",
    "uevr_redengine4_adapter", 
    "uevr_mt_framework_adapter",
    "uevr_context7_database"
]
cmake-after="""
add_custom_command(
TARGET uevr PRE_BUILD
    COMMAND ${CMAKE_COMMAND} -E echo "Compiling shaders for UEVR..."
    COMMAND ${CMAKE_COMMAND} -E chdir ${CMAKE_SOURCE_DIR}/src/mods/vr/shaders ${CMAKE_SOURCE_DIR}/src/mods/vr/shaders/compile_shaders.bat
)

add_custom_command(
    TARGET uevr PRE_BUILD
    COMMAND ${CMAKE_COMMAND} -E echo "Generating commit hash..."
    COMMAND ${CMAKE_COMMAND} -E chdir ${CMAKE_SOURCE_DIR} ${CMAKE_SOURCE_DIR}/MakeCommitHash.bat
)
add_custom_command(
    TARGET uevr POST_BUILD
    COMMAND ${CMAKE_COMMAND} -E copy_if_different $<TARGET_FILE:openvr> $<TARGET_FILE_DIR:uevr>)

# Cross-Engine VR System Post-Build Integration
if(uevr_BUILD_CROSS_ENGINE)
    add_custom_command(
        TARGET uevr POST_BUILD
        COMMAND ${CMAKE_COMMAND} -E echo "Integrating Cross-Engine VR Adapters..."
        COMMAND ${CMAKE_COMMAND} -E copy_if_different $<TARGET_FILE:uevr_re_engine_adapter> $<TARGET_FILE_DIR:uevr>
        COMMAND ${CMAKE_COMMAND} -E copy_if_different $<TARGET_FILE:uevr_redengine4_adapter> $<TARGET_FILE_DIR:uevr>
        COMMAND ${CMAKE_COMMAND} -E copy_if_different $<TARGET_FILE:uevr_mt_framework_adapter> $<TARGET_FILE_DIR:uevr>
    )
    
    # Copy cross-engine profiles and configurations
    add_custom_command(
        TARGET uevr POST_BUILD
        COMMAND ${CMAKE_COMMAND} -E copy_directory ${CMAKE_SOURCE_DIR}/profiles $<TARGET_FILE_DIR:uevr>/profiles
        COMMAND ${CMAKE_COMMAND} -E copy_directory ${CMAKE_SOURCE_DIR}/docs/cross-engine $<TARGET_FILE_DIR:uevr>/docs/cross-engine
    )
endif()
"""

# Cross-Engine VR System Targets
[target.uevr_cross_engine_framework]
type = "static"
sources = [
    "src/adapters/common/*.cpp",
    "src/adapters/common/*.c"
]
headers = [
    "src/adapters/common/*.hpp", 
    "src/adapters/common/*.h"
]
include-directories = [
    "include/",
    "src/adapters/common",
    "src/adapters/re-engine",
    "src/adapters/redengine4", 
    "src/adapters/mt-framework"
]
compile-features = ["cxx_std_23"]
compile-options = ["/bigobj", "/EHa", "/MP"]
link-libraries = [
    "kananlib",
    "glm",
    "nlohmann_json",
    "spdlog"
]

[target.uevr_re_engine_adapter]
type = "shared"
sources = [
    "src/adapters/re-engine/*.cpp",
    "src/adapters/re-engine/*.c"
]
headers = [
    "src/adapters/re-engine/*.hpp",
    "src/adapters/re-engine/*.h"
]
include-directories = [
    "include/",
    "src/adapters/common",
    "src/adapters/re-engine"
]
compile-features = ["cxx_std_23"]
compile-options = ["/bigobj", "/EHa", "/MP"]
link-libraries = [
    "uevr_cross_engine_framework",
    "kananlib",
    "glm",
    "nlohmann_json",
    "spdlog"
]
cmake-after="""
set_target_properties(uevr_re_engine_adapter PROPERTIES
    OUTPUT_NAME "uevr_re_engine_adapter"
    RUNTIME_OUTPUT_DIRECTORY_RELEASE "${CMAKE_BINARY_DIR}/bin"
    RUNTIME_OUTPUT_DIRECTORY_RELWITHDEBINFO "${CMAKE_BINARY_DIR}/bin"
)
"""

[target.uevr_redengine4_adapter]
type = "shared"
sources = [
    "src/adapters/redengine4/*.cpp",
    "src/adapters/redengine4/*.c"
]
headers = [
    "src/adapters/redengine4/*.hpp",
    "src/adapters/redengine4/*.h"
]
include-directories = [
    "include/",
    "src/adapters/common",
    "src/adapters/redengine4"
]
compile-features = ["cxx_std_23"]
compile-options = ["/bigobj", "/EHa", "/MP"]
link-libraries = [
    "uevr_cross_engine_framework",
    "kananlib",
    "glm",
    "nlohmann_json",
    "spdlog"
]
cmake-after="""
set_target_properties(uevr_redengine4_adapter PROPERTIES
    OUTPUT_NAME "uevr_redengine4_adapter"
    RUNTIME_OUTPUT_DIRECTORY_RELEASE "${CMAKE_BINARY_DIR}/bin"
    RUNTIME_OUTPUT_DIRECTORY_RELWITHDEBINFO "${CMAKE_BINARY_DIR}/bin"
)
"""

[target.uevr_mt_framework_adapter]
type = "shared"
sources = [
    "src/adapters/mt-framework/*.cpp",
    "src/adapters/mt-framework/*.c"
]
headers = [
    "src/adapters/mt-framework/*.hpp",
    "src/adapters/mt-framework/*.h"
]
include-directories = [
    "include/",
    "src/adapters/common",
    "src/adapters/mt-framework"
]
compile-features = ["cxx_std_23"]
compile-options = ["/bigobj", "/EHa", "/MP"]
link-libraries = [
    "uevr_cross_engine_framework",
    "kananlib",
    "glm",
    "nlohmann_json",
    "spdlog"
]
cmake-after="""
set_target_properties(uevr_mt_framework_adapter PROPERTIES
    OUTPUT_NAME "uevr_mt_framework_adapter"
    RUNTIME_OUTPUT_DIRECTORY_RELEASE "${CMAKE_BINARY_DIR}/bin"
    RUNTIME_OUTPUT_DIRECTORY_RELWITHDEBINFO "${CMAKE_BINARY_DIR}/bin"
)
"""

# Cross-Engine Testing Framework
[target.uevr_cross_engine_tests]
type = "shared"
sources = [
    "src/adapters/common/testing_framework.cpp"
]
headers = [
    "src/adapters/common/testing_framework.hpp"
]
include-directories = [
    "include/",
    "src/adapters/common"
]
compile-features = ["cxx_std_23"]
compile-options = ["/bigobj", "/EHa", "/MP"]
link-libraries = [
    "uevr_cross_engine_framework",
    "spdlog"
]
cmake-after="""
set_target_properties(uevr_cross_engine_tests PROPERTIES
    OUTPUT_NAME "uevr_cross_engine_tests"
    RUNTIME_OUTPUT_DIRECTORY_RELEASE "${CMAKE_BINARY_DIR}/bin"
    RUNTIME_OUTPUT_DIRECTORY_RELWITHDEBINFO "${CMAKE_BINARY_DIR}/bin"
)
"""

# Cross-Engine VR System Integration
option(uevr_BUILD_CROSS_ENGINE "Build Cross-Engine VR System" ON)
option(uevr_BUILD_ALL_ADAPTERS "Build All Cross-Engine Adapters" ON)
option(uevr_BUILD_RE_ENGINE_ADAPTER "Build RE Engine Adapter" ON)
option(uevr_BUILD_REDENGINE4_ADAPTER "Build REDengine 4 Adapter" ON)
option(uevr_BUILD_MT_FRAMEWORK_ADAPTER "Build MT Framework Adapter" ON)
option(uevr_BUILD_UNREAL_ENGINE_ADAPTER "Build Unreal Engine Adapter" ON)
option(uevr_BUILD_UNITY_ENGINE_ADAPTER "Build Unity Engine Adapter" ON)

# Context7 Database Integration
option(uevr_BUILD_CONTEXT7_DATABASE "Build Context7 Database System" ON)
option(uevr_ENABLE_AI_ANALYSIS "Enable AI-powered VR Analysis" ON)
